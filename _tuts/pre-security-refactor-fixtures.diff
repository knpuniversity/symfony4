diff --git a/src/DataFixtures/ArticleFixtures.php b/src/DataFixtures/ArticleFixtures.php
index 90f23e0..2dd3e65 100644
--- a/src/DataFixtures/ArticleFixtures.php
+++ b/src/DataFixtures/ArticleFixtures.php
@@ -27,9 +27,10 @@ class ArticleFixtures extends BaseFixture implements DependentFixtureInterface
         'Amy Oort',
     ];
 
-    public function loadData(ObjectManager $manager)
+    protected function loadData(ObjectManager $manager)
     {
-        $this->createMany(Article::class, 10, function(Article $article, $count) use ($manager) {
+        $this->createMany(10, 'main_articles', function($count) use ($manager) {
+            $article = new Article();
             $article->setTitle($this->faker->randomElement(self::$articleTitles))
                 ->setContent(<<<EOF
 Spicy **jalapeno bacon** ipsum dolor amet veniam shank in dolore. Ham hock nisi landjaeger cow,
@@ -61,10 +62,12 @@ EOF
                 ->setImageFilename($this->faker->randomElement(self::$articleImages))
             ;
 
-            $tags = $this->getRandomReferences(Tag::class, $this->faker->numberBetween(0, 5));
+            $tags = $this->getRandomReferences('main_tags', $this->faker->numberBetween(0, 5));
             foreach ($tags as $tag) {
                 $article->addTag($tag);
             }
+
+            return $article;
         });
 
         $manager->flush();
diff --git a/src/DataFixtures/BaseFixture.php b/src/DataFixtures/BaseFixture.php
index ed8d012..9fc86d5 100644
--- a/src/DataFixtures/BaseFixture.php
+++ b/src/DataFixtures/BaseFixture.php
@@ -27,43 +27,63 @@ abstract class BaseFixture extends Fixture
         $this->loadData($manager);
     }
 
-    protected function createMany(string $className, int $count, callable $factory)
+    /**
+     * Create many objects at once:
+     *
+     *      $this->createMany(10, function(int $i) {
+     *          $user = new User();
+     *          $user->setFirstName('Ryan');
+     *
+     *           return $user;
+     *      });
+     *
+     * @param int      $count
+     * @param string   $groupName Tag these created objects with this group name,
+     *                            and use this later with getRandomReference(s)
+     *                            to fetch only from this specific group.
+     * @param callable $factory
+     */
+    protected function createMany(int $count, string $groupName, callable $factory)
     {
         for ($i = 0; $i < $count; $i++) {
-            $entity = new $className();
-            $factory($entity, $i);
+            $entity = $factory($i);
+
+            if (null === $entity) {
+                throw new \LogicException('Did you forget to return the entity object from your callback to BaseFixture::createMany()?');
+            }
 
             $this->manager->persist($entity);
-            // store for usage later as App\Entity\ClassName_#COUNT#
-            $this->addReference($className . '_' . $i, $entity);
+
+            // store for usage later as groupName_#COUNT#
+            $this->addReference(sprintf('%s_%d', $groupName, $i), $entity);
         }
     }
 
-    protected function getRandomReference(string $className) {
-        if (!isset($this->referencesIndex[$className])) {
-            $this->referencesIndex[$className] = [];
+    protected function getRandomReference(string $groupName) {
+        if (!isset($this->referencesIndex[$groupName])) {
+            $this->referencesIndex[$groupName] = [];
 
             foreach ($this->referenceRepository->getReferences() as $key => $ref) {
-                if (strpos($key, $className.'_') === 0) {
-                    $this->referencesIndex[$className][] = $key;
+                if (strpos($key, $groupName.'_') === 0) {
+                    $this->referencesIndex[$groupName][] = $key;
                 }
             }
         }
 
-        if (empty($this->referencesIndex[$className])) {
-            throw new \Exception(sprintf('Cannot find any references for class "%s"', $className));
+        if (empty($this->referencesIndex[$groupName])) {
+            throw new \InvalidArgumentException(sprintf('Did not find any references saved with the group name "%s"', $groupName));
         }
 
-        $randomReferenceKey = $this->faker->randomElement($this->referencesIndex[$className]);
+        $randomReferenceKey = $this->faker->randomElement($this->referencesIndex[$groupName]);
 
         return $this->getReference($randomReferenceKey);
     }
 
-    protected function getRandomReferences(string $className, int $count)
+    protected function getRandomReferences(string $groupName, int $count)
     {
         $references = [];
         while (count($references) < $count) {
-            $references[] = $this->getRandomReference($className);
+            $references[] = $this->getRandomReference($groupName);
         }
 
         return $references;
diff --git a/src/DataFixtures/CommentFixture.php b/src/DataFixtures/CommentFixture.php
index 912d618..5a48a49 100644
--- a/src/DataFixtures/CommentFixture.php
+++ b/src/DataFixtures/CommentFixture.php
@@ -11,7 +11,8 @@ class CommentFixture extends BaseFixture implements DependentFixtureInterface
 {
     protected function loadData(ObjectManager $manager)
     {
-        $this->createMany(Comment::class, 100, function(Comment $comment) {
+        $this->createMany(100, 'main_comments', function() {
+            $comment = new Comment();
             $comment->setContent(
                 $this->faker->boolean ? $this->faker->paragraph : $this->faker->sentences(2, true)
             );
@@ -19,7 +20,9 @@ class CommentFixture extends BaseFixture implements DependentFixtureInterface
             $comment->setAuthorName($this->faker->name);
             $comment->setCreatedAt($this->faker->dateTimeBetween('-1 months', '-1 seconds'));
             $comment->setIsDeleted($this->faker->boolean(20));
-            $comment->setArticle($this->getRandomReference(Article::class));
+            $comment->setArticle($this->getRandomReference('main_articles'));
+
+            return $comment;
         });
 
         $manager->flush();
diff --git a/src/DataFixtures/TagFixture.php b/src/DataFixtures/TagFixture.php
index 6939a4c..b7ccc4d 100644
--- a/src/DataFixtures/TagFixture.php
+++ b/src/DataFixtures/TagFixture.php
@@ -9,8 +9,11 @@ class TagFixture extends BaseFixture
 {
     protected function loadData(ObjectManager $manager)
     {
-        $this->createMany(Tag::class, 10, function(Tag $tag) {
+        $this->createMany(10, 'main_tags', function() {
+            $tag = new Tag();
             $tag->setName($this->faker->realText(20));
+
+            return $tag;
         });
 
         $manager->flush();
