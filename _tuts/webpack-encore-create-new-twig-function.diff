diff --git a/config/services.yaml b/config/services.yaml
index 85e9f3b..c230130 100644
--- a/config/services.yaml
+++ b/config/services.yaml
@@ -25,6 +25,7 @@ services:
             $isDebug: '%kernel.debug%'
             $uploadsFilesystem: '@oneup_flysystem.uploads_filesystem_filesystem'
             $uploadedAssetsBaseUrl: '%uploads_base_url%'
+            string $publicDir: '%kernel.project_dir%/public'
 
     # custom aliases for autowiring
     Nexy\Slack\Client: '@nexy_slack.client'
diff --git a/src/Twig/AppExtension.php b/src/Twig/AppExtension.php
index b67dbcd..4ba7822 100644
--- a/src/Twig/AppExtension.php
+++ b/src/Twig/AppExtension.php
@@ -6,6 +6,7 @@ use App\Service\MarkdownHelper;
 use App\Service\UploaderHelper;
 use Psr\Container\ContainerInterface;
 use Symfony\Contracts\Service\ServiceSubscriberInterface;
+use Symfony\WebpackEncoreBundle\Asset\EntrypointLookupInterface;
 use Twig\Extension\AbstractExtension;
 use Twig\TwigFilter;
 use Twig\TwigFunction;
@@ -13,16 +14,19 @@ use Twig\TwigFunction;
 class AppExtension extends AbstractExtension implements ServiceSubscriberInterface
 {
     private $container;
+    private $publicDir;
 
-    public function __construct(ContainerInterface $container)
+    public function __construct(ContainerInterface $container, string $publicDir)
     {
         $this->container = $container;
+        $this->publicDir = $publicDir;
     }
 
     public function getFunctions(): array
     {
         return [
-            new TwigFunction('uploaded_asset', [$this, 'getUploadedAssetPath'])
+            new TwigFunction('uploaded_asset', [$this, 'getUploadedAssetPath']),
+            new TwigFunction('encore_entry_css_source', [$this, 'getEncoreEntryCssSource']),
         ];
     }
 
@@ -47,11 +51,26 @@ class AppExtension extends AbstractExtension implements ServiceSubscriberInterfa
             ->getPublicPath($path);
     }
 
+    public function getEncoreEntryCssSource(string $entryName): string
+    {
+        $files = $this->container
+            ->get(EntrypointLookupInterface::class)
+            ->getCssFiles($entryName);
+
+        $source = '';
+        foreach ($files as $file) {
+            $source .= file_get_contents($this->publicDir.'/'.$file);
+        }
+
+        return $source;
+    }
+
     public static function getSubscribedServices()
     {
         return [
             MarkdownHelper::class,
             UploaderHelper::class,
+            EntrypointLookupInterface::class,
         ];
     }
 }
