diff --git a/src/Form/DataTransformer/EmailToUserTransformer.php b/src/Form/DataTransformer/EmailToUserTransformer.php
index ab5c249..34f608c 100644
--- a/src/Form/DataTransformer/EmailToUserTransformer.php
+++ b/src/Form/DataTransformer/EmailToUserTransformer.php
@@ -10,10 +10,12 @@ use Symfony\Component\Form\Exception\TransformationFailedException;
 class EmailToUserTransformer implements DataTransformerInterface
 {
     private $userRepository;
+    private $finderCallback;
 
-    public function __construct(UserRepository $userRepository)
+    public function __construct(UserRepository $userRepository, callable $finderCallback)
     {
         $this->userRepository = $userRepository;
+        $this->finderCallback = $finderCallback;
     }
 
     public function transform($value)
@@ -35,7 +37,8 @@ class EmailToUserTransformer implements DataTransformerInterface
             return;
         }
 
-        $user = $this->userRepository->findOneBy(['email' => $value]);
+        $callback = $this->finderCallback;
+        $user = $callback($this->userRepository, $value);
 
         if (!$user) {
             throw new TransformationFailedException(sprintf('No user found with email "%s"', $value));
diff --git a/src/Form/UserSelectTextType.php b/src/Form/UserSelectTextType.php
index 2aeab27..c2fd5e2 100644
--- a/src/Form/UserSelectTextType.php
+++ b/src/Form/UserSelectTextType.php
@@ -20,7 +20,10 @@ class UserSelectTextType extends AbstractType
 
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->addModelTransformer(new EmailToUserTransformer($this->userRepository));
+        $builder->addModelTransformer(new EmailToUserTransformer(
+            $this->userRepository,
+            $options['finder_callback']
+        ));
     }
 
     public function getParent()
@@ -32,6 +35,9 @@ class UserSelectTextType extends AbstractType
     {
         $resolver->setDefaults([
             'invalid_message' => 'Hmm, user not found!',
+            'finder_callback' => function(UserRepository $userRepository, string $email) {
+                return $userRepository->findOneBy(['email' => $email]);
+            }
         ]);
     }
 }
