diff --git a/src/Entity/Article.php b/src/Entity/Article.php
index 111fb83..b4345d3 100644
--- a/src/Entity/Article.php
+++ b/src/Entity/Article.php
@@ -87,10 +87,16 @@ class Article
      */
     private $specificLocationName;
 
+    /**
+     * @ORM\OneToMany(targetEntity="App\Entity\ArticleReference", mappedBy="article")
+     */
+    private $articleReferences;
+
     public function __construct()
     {
         $this->comments = new ArrayCollection();
         $this->tags = new ArrayCollection();
+        $this->articleReferences = new ArrayCollection();
     }
 
     public function getId()
@@ -306,4 +312,35 @@ class Article
 
         return $this;
     }
+
+    /**
+     * @return Collection|ArticleReference[]
+     */
+    public function getArticleReferences(): Collection
+    {
+        return $this->articleReferences;
+    }
+
+    public function addArticleReference(ArticleReference $articleReference): self
+    {
+        if (!$this->articleReferences->contains($articleReference)) {
+            $this->articleReferences[] = $articleReference;
+            $articleReference->setArticle($this);
+        }
+
+        return $this;
+    }
+
+    public function removeArticleReference(ArticleReference $articleReference): self
+    {
+        if ($this->articleReferences->contains($articleReference)) {
+            $this->articleReferences->removeElement($articleReference);
+            // set the owning side to null (unless already changed)
+            if ($articleReference->getArticle() === $this) {
+                $articleReference->setArticle(null);
+            }
+        }
+
+        return $this;
+    }
 }
diff --git a/src/Entity/ArticleReference.php b/src/Entity/ArticleReference.php
new file mode 100644
index 0000000..9687fb7
--- /dev/null
+++ b/src/Entity/ArticleReference.php
@@ -0,0 +1,92 @@
+<?php
+
+namespace App\Entity;
+
+use Doctrine\ORM\Mapping as ORM;
+
+/**
+ * @ORM\Entity(repositoryClass="App\Repository\ArticleReferenceRepository")
+ */
+class ArticleReference
+{
+    /**
+     * @ORM\Id()
+     * @ORM\GeneratedValue()
+     * @ORM\Column(type="integer")
+     */
+    private $id;
+
+    /**
+     * @ORM\ManyToOne(targetEntity="App\Entity\Article", inversedBy="articleReferences")
+     * @ORM\JoinColumn(nullable=false)
+     */
+    private $article;
+
+    /**
+     * @ORM\Column(type="string", length=255)
+     */
+    private $filename;
+
+    /**
+     * @ORM\Column(type="string", length=255)
+     */
+    private $originalFilename;
+
+    /**
+     * @ORM\Column(type="string", length=255)
+     */
+    private $mimeType;
+
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    public function getArticle(): ?Article
+    {
+        return $this->article;
+    }
+
+    public function setArticle(?Article $article): self
+    {
+        $this->article = $article;
+
+        return $this;
+    }
+
+    public function getFilename(): ?string
+    {
+        return $this->filename;
+    }
+
+    public function setFilename(string $filename): self
+    {
+        $this->filename = $filename;
+
+        return $this;
+    }
+
+    public function getOriginalFilename(): ?string
+    {
+        return $this->originalFilename;
+    }
+
+    public function setOriginalFilename(string $originalFilename): self
+    {
+        $this->originalFilename = $originalFilename;
+
+        return $this;
+    }
+
+    public function getMimeType(): ?string
+    {
+        return $this->mimeType;
+    }
+
+    public function setMimeType(string $mimeType): self
+    {
+        $this->mimeType = $mimeType;
+
+        return $this;
+    }
+}
diff --git a/src/Migrations/Version20190214204726.php b/src/Migrations/Version20190214204726.php
new file mode 100644
index 0000000..2331de7
--- /dev/null
+++ b/src/Migrations/Version20190214204726.php
@@ -0,0 +1,36 @@
+<?php
+
+declare(strict_types=1);
+
+namespace DoctrineMigrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\AbstractMigration;
+
+/**
+ * Auto-generated Migration: Please modify to your needs!
+ */
+final class Version20190214204726 extends AbstractMigration
+{
+    public function getDescription() : string
+    {
+        return '';
+    }
+
+    public function up(Schema $schema) : void
+    {
+        // this up() migration is auto-generated, please modify it to your needs
+        $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \'mysql\'.');
+
+        $this->addSql('CREATE TABLE article_reference (id INT AUTO_INCREMENT NOT NULL, article_id INT NOT NULL, filename VARCHAR(255) NOT NULL, mime_type VARCHAR(255) NOT NULL, original_filename VARCHAR(255) NOT NULL, INDEX IDX_749619377294869C (article_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ENGINE = InnoDB');
+        $this->addSql('ALTER TABLE article_reference ADD CONSTRAINT FK_749619377294869C FOREIGN KEY (article_id) REFERENCES article (id)');
+    }
+
+    public function down(Schema $schema) : void
+    {
+        // this down() migration is auto-generated, please modify it to your needs
+        $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \'mysql\'.');
+
+        $this->addSql('DROP TABLE article_reference');
+    }
+}
diff --git a/src/Repository/ArticleReferenceRepository.php b/src/Repository/ArticleReferenceRepository.php
new file mode 100644
index 0000000..aedb99b
--- /dev/null
+++ b/src/Repository/ArticleReferenceRepository.php
@@ -0,0 +1,50 @@
+<?php
+
+namespace App\Repository;
+
+use App\Entity\ArticleReference;
+use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
+use Symfony\Bridge\Doctrine\RegistryInterface;
+
+/**
+ * @method ArticleReference|null find($id, $lockMode = null, $lockVersion = null)
+ * @method ArticleReference|null findOneBy(array $criteria, array $orderBy = null)
+ * @method ArticleReference[]    findAll()
+ * @method ArticleReference[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
+ */
+class ArticleReferenceRepository extends ServiceEntityRepository
+{
+    public function __construct(RegistryInterface $registry)
+    {
+        parent::__construct($registry, ArticleReference::class);
+    }
+
+    // /**
+    //  * @return ArticleReference[] Returns an array of ArticleReference objects
+    //  */
+    /*
+    public function findByExampleField($value)
+    {
+        return $this->createQueryBuilder('a')
+            ->andWhere('a.exampleField = :val')
+            ->setParameter('val', $value)
+            ->orderBy('a.id', 'ASC')
+            ->setMaxResults(10)
+            ->getQuery()
+            ->getResult()
+        ;
+    }
+    */
+
+    /*
+    public function findOneBySomeField($value): ?ArticleReference
+    {
+        return $this->createQueryBuilder('a')
+            ->andWhere('a.exampleField = :val')
+            ->setParameter('val', $value)
+            ->getQuery()
+            ->getOneOrNullResult()
+        ;
+    }
+    */
+}
