diff --git a/src/Helper/LoggerTrait.php b/src/Helper/LoggerTrait.php
new file mode 100644
index 0000000..8a831c2
--- /dev/null
+++ b/src/Helper/LoggerTrait.php
@@ -0,0 +1,27 @@
+<?php
+namespace App\Helper;
+
+use Psr\Log\LoggerInterface;
+
+trait LoggerTrait
+{
+    /**
+     * @var LoggerInterface|null
+     */
+    private $logger;
+
+    /**
+     * @required
+     */
+    public function setLogger(LoggerInterface $logger)
+    {
+        $this->logger = $logger;
+    }
+
+    private function logInfo(string $message, array $context = [])
+    {
+        if ($this->logger) {
+            $this->logger->info($message, $context);
+        }
+    }
+}
diff --git a/src/Service/SlackClient.php b/src/Service/SlackClient.php
index fbb9bae..5f90b7d 100644
--- a/src/Service/SlackClient.php
+++ b/src/Service/SlackClient.php
@@ -2,36 +2,25 @@
 
 namespace App\Service;
 
+use App\Helper\LoggerTrait;
 use Nexy\Slack\Client;
-use Psr\Log\LoggerInterface;
 
 class SlackClient
 {
-    private $slack;
+    use LoggerTrait;
 
-    /**
-     * @var LoggerInterface|null
-     */
-    private $logger;
+    private $slack;
 
     public function __construct(Client $slack)
     {
         $this->slack = $slack;
     }
 
-    /**
-     * @required
-     */
-    public function setLogger(LoggerInterface $logger)
-    {
-        $this->logger = $logger;
-    }
-
     public function sendMessage(string $from, string $message)
     {
-        if ($this->logger) {
-            $this->logger->info('Beaming a message to Slack!');
-        }
+        $this->logInfo('Beaming a message to Slack!', [
+            'message' => $message
+        ]);
 
         $message = $this->slack->createMessage()
             ->from($from)
